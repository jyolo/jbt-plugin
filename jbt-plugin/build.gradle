import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.util.stream.Collectors


plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.8.21"
    id 'org.jetbrains.intellij' version '1.2.0'
}

group 'com.demo6'
version project.hasProperty('externalVersion') ? project.externalVersion : '1.1.1'

sourceCompatibility = 9
targetCompatibility = 9

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "9"
    }
}

wrapper {
    gradleVersion = '7.6'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

//apply plugin: "org.jlleitschuh.gradle.ktlint-idea"


dependencies {
    implementation("org.eclipse.jetty:jetty-server:9.4.43.v20210629")
    implementation("org.eclipse.jetty:jetty-servlet:9.4.43.v20210629")
//    implementation("com.alibaba.fastjson2:fastjson2:2.0.17")
//    implementation("cn.hutool:hutool-http:5.8.12")
//    implementation("com.obiscr:openai-auth:1.0.1")
//    implementation("com.squareup.okhttp3:okhttp:4.10.0")
//    implementation("com.squareup.okhttp3:okhttp-sse:4.8.1")
//    implementation("com.vladsch.flexmark:flexmark:0.62.2")
//    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.32")
//    implementation("com.squareup.okhttp3:okhttp:4.9.1")
//
//    testImplementation "org.hamcrest:hamcrest:2.2"
//    testImplementation 'org.mockito:mockito-core:4.8.0'
//    testImplementation 'org.mockito:mockito-inline:4.8.0'
//    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
//    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
//    testImplementation "io.mockk:mockk:1.11.0"
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
//    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.9.0'
}

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
    }
}

intellij {
    version = '2022.2.3'
    type = 'IC'
    updateSinceUntilBuild = false
}

//dependencies {
//    compile fileTree(dir: 'lib', include: '*.jar')
//}

def PRODUCTION_CHANNEL = null
def channelName = project.hasProperty('channel') ? project.channel : 'alpha'
def publishChannel = channelName == "production" ? PRODUCTION_CHANNEL : channelName

sourceSets {
    main {
        java.srcDirs += "channels/${channelName}"
    }
}



def hubToken = project.hasProperty('hubToken') ? hubToken : (System.getenv('HUB_TOKEN'))

publishPlugin {
    if (publishChannel != PRODUCTION_CHANNEL) {
        channels = [publishChannel]
    }
    token = hubToken
}

tasks.create("currentVersion") {
    doLast {
        println version
    }
}

tasks.getByName("runIde").configure {
    if (project.hasProperty('logFilePath')) {
        systemProperty("TABNINE_LOG_FILE_PATH", logFilePath)
    }
}


//tasks {
////    build {
//////        dependsOn(addKtlintFormatGitPreCommitHook)
////    }
////
////    compileKotlin {
////        dependsOn(ktlintFormat)
////    }
//}

static def getIdeVersions(Project project) {
    def ideVersions = project.hasProperty('ideVersions') ?
            Arrays.asList(project.ideVersions.split(',')) :
            ['IC-2020.3.3']
    return ideVersions
}

runPluginVerifier {
    ideVersions = getIdeVersions(project)
    if (project.hasProperty("localPaths")) {
        localPaths = Arrays.stream(project.localPaths.split(',')).map(File::new).collect(Collectors.toList())
    }
}
